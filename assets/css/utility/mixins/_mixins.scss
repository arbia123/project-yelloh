/* mixins */
//border radius
@mixin border-round($top, $left, $bottom, $right ){
    -moz-border-radius: $top $left $bottom $right;
    -webkit-border-radius: $top $left $bottom $right;
    border-radius: $top $left $bottom $right;
}
@mixin rounded($radius: $full) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}
//borders
@mixin border-all($color, $width: 1px, $style: "solid") {
    border-width: $width;
    border-style: $style;
    border-color: $color;
}
@mixin border($direction, $width, $style, $color) {
  border-#{$direction}: $width $style $color;
}
//gradient
@mixin linear-gradient($posstart , $postop, $from, $to, $stop: $full) {
    background-color: $from;
    background-image: -moz-linear-gradient($posstart, $from 0%, $to $stop);
    background-image: -webkit-gradient(linear, $posstart top, $postop top, color-stop(0%, $from), color-stop($stop, $to));
    background-image: -webkit-linear-gradient($posstart, $from 0%, $to $stop);
    background-image: -o-linear-gradient($posstart, $from 0%, $to $stop);
    background: -ms-linear-gradient($posstart, $from 0%, $to $stop);
    background: linear-gradient(to $postop, $from 0%, $to $stop);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$from', endColorstr='$to',GradientType=1 );
}
//positions
@mixin position($type, $top: 0, $right: 0, $bottom: 0, $left: 0){
	  position: $type;
	  top: $top;
	  right: $right;
	  bottom: $bottom;
	  left: $left;
}

//box shadow
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}
//opacity
@mixin opacity($opacity: 0){
	filter: alpha(opacity=$opacity);
    opacity: $opacity;
}
//font
@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
    @if $size { font-size: $size; }
    @if $colour { color: $colour; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}
//placeholder
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}
/*
input,  
textarea {  
    @include input-placeholder {
        color: $grey;
    }
}
*/
//mediaquery
$breakpoints: (
    "phone":        400px,
    "phone-wide":   480px,
    "phablet":      560px,
    "tablet-small": 640px,
    "tablet":       768px,
    "tablet-wide":  1024px,
    "desktop":      1248px,
    "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
        @if $type == max {
            $width: $width - 1px;
        }
        @media only screen and (#{$type}-width: $width) {
            @content;
        }
    }
}
/*
.site-header {
    padding: 2rem;
    font-size: 1.8rem;
    @include mq('tablet-wide') {
        padding-top: 4rem;
        font-size: 2.4rem;
    }
}
*/
//turncate
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}
//z-index
@function z($name) {
    @if index($z-indexes, $name) {
        @return (length($z-indexes) - index($z-indexes, $name)) + 1;
    } @else {
        @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
        @return null;
    }
}
$z-indexes: (
    "outdated-browser",
    "modal",
    "site-header",
    "page-wrapper",
    "site-footer"
);
//Responsive ratio
@mixin responsive-ratio($x,$y, $pseudo: false) {
    $padding: unquote( ( $y / $x ) * 100 + '%' );
    @if $pseudo {
        &:before {
            @include pseudo($pos: relative);
            width: 100%;
            padding-top: $padding;
        }
    } @else {
        padding-top: $padding;
    }
}
/*
div {
    @include responsive-ratio(16,9);
}
*/
//after 
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}
//arrow
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}
//push auto
@mixin push--auto {
    margin: { 
        left: auto;
        right: auto;
    }
}
//square
@mixin square($size) {
    width: $size;
    height: $size;
}

